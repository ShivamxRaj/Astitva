{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shivam raj\\\\OneDrive\\\\Desktop\\\\Learning\\\\dream\\\\frontend\\\\src\\\\components\\\\IntegratedChatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { PaperAirplaneIcon, XMarkIcon, ClockIcon } from '@heroicons/react/24/outline';\nimport LoadingSpinner from './LoadingSpinner';\nimport { useTranslation } from 'react-i18next';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = '/api/chat'; // Adjust if needed\nconst AUTO_CLEAR_AFTER = 4; // Number of user-bot exchanges before auto-clear\n\nconst IntegratedChatbot = ({\n  isOpen,\n  onClose\n}) => {\n  _s();\n  const {\n    t\n  } = useTranslation();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const chatEndRef = useRef(null);\n\n  // Load conversation from backend (MongoDB)\n  useEffect(() => {\n    if (isOpen) {\n      fetch(`${API_BASE}/load`, {\n        credentials: 'include'\n      }).then(res => res.json()).then(data => {\n        if (data && data.conversation) {\n          setMessages(data.conversation);\n        } else {\n          setMessages([getWelcomeMessage()]);\n        }\n      }).catch(() => setMessages([getWelcomeMessage()]));\n    }\n  }, [isOpen]);\n\n  // Scroll to bottom on new message\n  useEffect(() => {\n    if (isOpen && chatEndRef.current) {\n      chatEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages, isOpen]);\n\n  // Auto-clear after N user-bot exchanges\n  useEffect(() => {\n    const userMessages = messages.filter(m => m.role === 'user');\n    if (userMessages.length >= AUTO_CLEAR_AFTER) {\n      setTimeout(() => handleClearConversation(), 1200);\n    }\n    // eslint-disable-next-line\n  }, [messages]);\n  function getWelcomeMessage() {\n    return {\n      role: 'bot',\n      text: t('chatbot.welcome', {\n        defaultValue: \"Hi! How can I help you today? You can ask about reporting, support, or anything about our mission.\"\n      }),\n      timestamp: new Date().toISOString(),\n      quickReplies: [t('chatbot.quick.about', {\n        defaultValue: 'About Avyakta'\n      }), t('chatbot.quick.emergency', {\n        defaultValue: 'Emergency Help'\n      }), t('chatbot.quick.contact', {\n        defaultValue: 'Contact Support'\n      }), t('chatbot.quick.report', {\n        defaultValue: 'How to Report'\n      })]\n    };\n  }\n\n  // Save conversation to backend\n  const saveConversation = conv => {\n    fetch(`${API_BASE}/save`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        conversation: conv\n      })\n    });\n  };\n\n  // Handle sending a message\n  const handleSend = async msg => {\n    if (!msg.trim()) return;\n    const newMessages = [...messages, {\n      role: 'user',\n      text: msg,\n      timestamp: new Date().toISOString()\n    }];\n    setMessages(newMessages);\n    setInput('');\n    setIsLoading(true);\n    setIsTyping(true);\n    saveConversation(newMessages);\n\n    // Simulate typing animation\n    setTimeout(async () => {\n      // Call backend for bot reply\n      let botReply = await fetch(`${API_BASE}/reply`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          message: msg,\n          conversation: newMessages\n        })\n      }).then(res => res.json()).then(data => data.reply || t('chatbot.fallback', {\n        defaultValue: \"I'm here to help!\"\n      })).catch(() => t('chatbot.fallback', {\n        defaultValue: \"I'm here to help!\"\n      }));\n      const botMessage = {\n        role: 'bot',\n        text: botReply,\n        timestamp: new Date().toISOString(),\n        quickReplies: getQuickReplies(botReply)\n      };\n      const updatedMessages = [...newMessages, botMessage];\n      setMessages(updatedMessages);\n      setIsLoading(false);\n      setIsTyping(false);\n      saveConversation(updatedMessages);\n    }, 1200);\n  };\n\n  // Get quick replies based on bot reply (simple demo logic)\n  function getQuickReplies(botReply) {\n    if (/emergency|help|sos/i.test(botReply)) {\n      return [t('chatbot.quick.emergency', {\n        defaultValue: 'Emergency Help'\n      })];\n    }\n    if (/report|missing|case/i.test(botReply)) {\n      return [t('chatbot.quick.report', {\n        defaultValue: 'How to Report'\n      })];\n    }\n    if (/contact|support|email|phone/i.test(botReply)) {\n      return [t('chatbot.quick.contact', {\n        defaultValue: 'Contact Support'\n      })];\n    }\n    return [t('chatbot.quick.about', {\n      defaultValue: 'About Avyakta'\n    }), t('chatbot.quick.emergency', {\n      defaultValue: 'Emergency Help'\n    })];\n  }\n\n  // Handle quick reply click\n  const handleQuickReply = text => {\n    handleSend(text);\n  };\n\n  // Clear conversation (both UI and backend)\n  const handleClearConversation = () => {\n    setMessages([getWelcomeMessage()]);\n    fetch(`${API_BASE}/clear`, {\n      method: 'POST',\n      credentials: 'include'\n    });\n  };\n\n  // Handle Enter key\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend(input);\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed bottom-6 right-44 z-50 w-96 max-w-full bg-white rounded-2xl shadow-2xl border border-gray-200 flex flex-col animate-fade-in\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-between p-4 bg-gradient-to-r from-blue-600 to-purple-600 rounded-t-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"w-10 h-10 bg-white rounded-full flex items-center justify-center\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/images/logo.png\",\n            alt: \"Avyakta\",\n            className: \"w-7 h-7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-semibold text-lg text-white\",\n            children: \"Chat Support\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClose,\n        className: \"text-white hover:text-blue-100 p-2 hover:bg-blue-600 rounded-full transition-colors duration-200\",\n        children: /*#__PURE__*/_jsxDEV(XMarkIcon, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto px-4 py-3 bg-gradient-to-br from-slate-50 to-blue-50\",\n      style: {\n        minHeight: 320\n      },\n      children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex mb-2 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `max-w-xs rounded-2xl px-4 py-2 shadow-md text-sm whitespace-pre-line ${msg.role === 'user' ? 'bg-blue-600 text-white rounded-br-sm' : 'bg-white text-gray-900 rounded-bl-sm border border-blue-100'}`,\n          children: [msg.text, /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-1 mt-1 opacity-60 text-xs\",\n            children: [/*#__PURE__*/_jsxDEV(ClockIcon, {\n              className: \"w-3 h-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this), formatTime(msg.timestamp)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this)\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mb-2 justify-start\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-xs rounded-2xl px-4 py-2 shadow-md text-sm bg-white text-gray-900 border border-blue-100 flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(LoadingSpinner, {\n            size: \"sm\",\n            color: \"blue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"animate-pulse\",\n            children: t('chatbot.typing', {\n              defaultValue: 'Typing...'\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), messages.length > 0 && messages[messages.length - 1].quickReplies && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-2 px-4 pb-2\",\n      children: messages[messages.length - 1].quickReplies.map((qr, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleQuickReply(qr),\n        className: \"bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-xs font-medium hover:bg-blue-200 transition-all\",\n        children: qr\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"flex items-center gap-2 p-3 border-t border-gray-200 bg-white rounded-b-2xl\",\n      onSubmit: e => {\n        e.preventDefault();\n        handleSend(input);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"flex-1 resize-none rounded-lg border border-gray-200 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400\",\n        rows: 1,\n        placeholder: t('chatbot.inputPlaceholder', {\n          defaultValue: 'Type your message...'\n        }),\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyDown: handleKeyDown,\n        disabled: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-blue-600 hover:bg-blue-700 text-white rounded-full p-2 transition-all disabled:opacity-50\",\n        disabled: isLoading || !input.trim(),\n        \"aria-label\": \"Send\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n          size: \"sm\",\n          color: \"white\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(PaperAirplaneIcon, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 69\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s(IntegratedChatbot, \"mdFclZa4Unbp8YToLJpcKLynB2o=\", false, function () {\n  return [useTranslation];\n});\n_c = IntegratedChatbot;\nfunction formatTime(ts) {\n  if (!ts) return '';\n  const d = new Date(ts);\n  return d.toLocaleTimeString([], {\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n}\nexport default IntegratedChatbot;\nvar _c;\n$RefreshReg$(_c, \"IntegratedChatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","PaperAirplaneIcon","XMarkIcon","ClockIcon","LoadingSpinner","useTranslation","jsxDEV","_jsxDEV","API_BASE","AUTO_CLEAR_AFTER","IntegratedChatbot","isOpen","onClose","_s","t","messages","setMessages","input","setInput","isLoading","setIsLoading","isTyping","setIsTyping","chatEndRef","fetch","credentials","then","res","json","data","conversation","getWelcomeMessage","catch","current","scrollIntoView","behavior","userMessages","filter","m","role","length","setTimeout","handleClearConversation","text","defaultValue","timestamp","Date","toISOString","quickReplies","saveConversation","conv","method","headers","body","JSON","stringify","handleSend","msg","trim","newMessages","botReply","message","reply","botMessage","getQuickReplies","updatedMessages","test","handleQuickReply","handleKeyDown","e","key","shiftKey","preventDefault","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","minHeight","map","idx","formatTime","size","color","ref","qr","i","onSubmit","rows","placeholder","value","onChange","target","onKeyDown","disabled","type","_c","ts","d","toLocaleTimeString","hour","minute","$RefreshReg$"],"sources":["C:/Users/Shivam raj/OneDrive/Desktop/Learning/dream/frontend/src/components/IntegratedChatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport { PaperAirplaneIcon, XMarkIcon, ClockIcon } from '@heroicons/react/24/outline';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nconst API_BASE = '/api/chat'; // Adjust if needed\r\nconst AUTO_CLEAR_AFTER = 4; // Number of user-bot exchanges before auto-clear\r\n\r\nconst IntegratedChatbot = ({ isOpen, onClose }) => {\r\n  const { t } = useTranslation();\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const chatEndRef = useRef(null);\r\n\r\n  // Load conversation from backend (MongoDB)\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      fetch(`${API_BASE}/load`, { credentials: 'include' })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          if (data && data.conversation) {\r\n            setMessages(data.conversation);\r\n          } else {\r\n            setMessages([getWelcomeMessage()]);\r\n          }\r\n        })\r\n        .catch(() => setMessages([getWelcomeMessage()]));\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Scroll to bottom on new message\r\n  useEffect(() => {\r\n    if (isOpen && chatEndRef.current) {\r\n      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [messages, isOpen]);\r\n\r\n  // Auto-clear after N user-bot exchanges\r\n  useEffect(() => {\r\n    const userMessages = messages.filter(m => m.role === 'user');\r\n    if (userMessages.length >= AUTO_CLEAR_AFTER) {\r\n      setTimeout(() => handleClearConversation(), 1200);\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [messages]);\r\n\r\n  function getWelcomeMessage() {\r\n    return {\r\n      role: 'bot',\r\n      text: t('chatbot.welcome', {\r\n        defaultValue:\r\n          \"Hi! How can I help you today? You can ask about reporting, support, or anything about our mission.\"\r\n      }),\r\n      timestamp: new Date().toISOString(),\r\n      quickReplies: [\r\n        t('chatbot.quick.about', { defaultValue: 'About Avyakta' }),\r\n        t('chatbot.quick.emergency', { defaultValue: 'Emergency Help' }),\r\n        t('chatbot.quick.contact', { defaultValue: 'Contact Support' }),\r\n        t('chatbot.quick.report', { defaultValue: 'How to Report' })\r\n      ]\r\n    };\r\n  }\r\n\r\n  // Save conversation to backend\r\n  const saveConversation = (conv) => {\r\n    fetch(`${API_BASE}/save`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      credentials: 'include',\r\n      body: JSON.stringify({ conversation: conv })\r\n    });\r\n  };\r\n\r\n  // Handle sending a message\r\n  const handleSend = async (msg) => {\r\n    if (!msg.trim()) return;\r\n    const newMessages = [\r\n      ...messages,\r\n      { role: 'user', text: msg, timestamp: new Date().toISOString() }\r\n    ];\r\n    setMessages(newMessages);\r\n    setInput('');\r\n    setIsLoading(true);\r\n    setIsTyping(true);\r\n    saveConversation(newMessages);\r\n\r\n    // Simulate typing animation\r\n    setTimeout(async () => {\r\n      // Call backend for bot reply\r\n      let botReply = await fetch(`${API_BASE}/reply`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        credentials: 'include',\r\n        body: JSON.stringify({ message: msg, conversation: newMessages })\r\n      })\r\n        .then(res => res.json())\r\n        .then(data => data.reply || t('chatbot.fallback', { defaultValue: \"I'm here to help!\" }))\r\n        .catch(() => t('chatbot.fallback', { defaultValue: \"I'm here to help!\" }));\r\n\r\n      const botMessage = {\r\n        role: 'bot',\r\n        text: botReply,\r\n        timestamp: new Date().toISOString(),\r\n        quickReplies: getQuickReplies(botReply)\r\n      };\r\n      const updatedMessages = [...newMessages, botMessage];\r\n      setMessages(updatedMessages);\r\n      setIsLoading(false);\r\n      setIsTyping(false);\r\n      saveConversation(updatedMessages);\r\n    }, 1200);\r\n  };\r\n\r\n  // Get quick replies based on bot reply (simple demo logic)\r\n  function getQuickReplies(botReply) {\r\n    if (/emergency|help|sos/i.test(botReply)) {\r\n      return [t('chatbot.quick.emergency', { defaultValue: 'Emergency Help' })];\r\n    }\r\n    if (/report|missing|case/i.test(botReply)) {\r\n      return [t('chatbot.quick.report', { defaultValue: 'How to Report' })];\r\n    }\r\n    if (/contact|support|email|phone/i.test(botReply)) {\r\n      return [t('chatbot.quick.contact', { defaultValue: 'Contact Support' })];\r\n    }\r\n    return [\r\n      t('chatbot.quick.about', { defaultValue: 'About Avyakta' }),\r\n      t('chatbot.quick.emergency', { defaultValue: 'Emergency Help' })\r\n    ];\r\n  }\r\n\r\n  // Handle quick reply click\r\n  const handleQuickReply = (text) => {\r\n    handleSend(text);\r\n  };\r\n\r\n  // Clear conversation (both UI and backend)\r\n  const handleClearConversation = () => {\r\n    setMessages([getWelcomeMessage()]);\r\n    fetch(`${API_BASE}/clear`, { method: 'POST', credentials: 'include' });\r\n  };\r\n\r\n  // Handle Enter key\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSend(input);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed bottom-6 right-44 z-50 w-96 max-w-full bg-white rounded-2xl shadow-2xl border border-gray-200 flex flex-col animate-fade-in\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-blue-600 to-purple-600 rounded-t-2xl\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <span className=\"w-10 h-10 bg-white rounded-full flex items-center justify-center\">\r\n            <img src=\"/images/logo.png\" alt=\"Avyakta\" className=\"w-7 h-7\" />\r\n          </span>\r\n          <div>\r\n            <h3 className=\"font-semibold text-lg text-white\">Chat Support</h3>\r\n          </div>\r\n        </div>\r\n        <button onClick={onClose} className=\"text-white hover:text-blue-100 p-2 hover:bg-blue-600 rounded-full transition-colors duration-200\">\r\n          <XMarkIcon className=\"w-5 h-5\" />\r\n        </button>\r\n      </div>\r\n\r\n      {/* Messages */}\r\n      <div className=\"flex-1 overflow-y-auto px-4 py-3 bg-gradient-to-br from-slate-50 to-blue-50\" style={{ minHeight: 320 }}>\r\n        {messages.map((msg, idx) => (\r\n          <div key={idx} className={`flex mb-2 ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>\r\n            <div className={`max-w-xs rounded-2xl px-4 py-2 shadow-md text-sm whitespace-pre-line ${\r\n              msg.role === 'user'\r\n                ? 'bg-blue-600 text-white rounded-br-sm'\r\n                : 'bg-white text-gray-900 rounded-bl-sm border border-blue-100'\r\n            }`}>\r\n              {msg.text}\r\n              <div className=\"flex items-center gap-1 mt-1 opacity-60 text-xs\">\r\n                <ClockIcon className=\"w-3 h-3\" />\r\n                {formatTime(msg.timestamp)}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {/* Typing animation */}\r\n        {isTyping && (\r\n          <div className=\"flex mb-2 justify-start\">\r\n            <div className=\"max-w-xs rounded-2xl px-4 py-2 shadow-md text-sm bg-white text-gray-900 border border-blue-100 flex items-center gap-2\">\r\n              <LoadingSpinner size=\"sm\" color=\"blue\" />\r\n              <span className=\"animate-pulse\">{t('chatbot.typing', { defaultValue: 'Typing...' })}</span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        <div ref={chatEndRef} />\r\n      </div>\r\n\r\n      {/* Quick Replies */}\r\n      {messages.length > 0 && messages[messages.length - 1].quickReplies && (\r\n        <div className=\"flex flex-wrap gap-2 px-4 pb-2\">\r\n          {messages[messages.length - 1].quickReplies.map((qr, i) => (\r\n            <button\r\n              key={i}\r\n              onClick={() => handleQuickReply(qr)}\r\n              className=\"bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-xs font-medium hover:bg-blue-200 transition-all\"\r\n            >\r\n              {qr}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Input */}\r\n      <form\r\n        className=\"flex items-center gap-2 p-3 border-t border-gray-200 bg-white rounded-b-2xl\"\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          handleSend(input);\r\n        }}\r\n      >\r\n        <textarea\r\n          className=\"flex-1 resize-none rounded-lg border border-gray-200 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-400\"\r\n          rows={1}\r\n          placeholder={t('chatbot.inputPlaceholder', { defaultValue: 'Type your message...' })}\r\n          value={input}\r\n          onChange={e => setInput(e.target.value)}\r\n          onKeyDown={handleKeyDown}\r\n          disabled={isLoading}\r\n        />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"bg-blue-600 hover:bg-blue-700 text-white rounded-full p-2 transition-all disabled:opacity-50\"\r\n          disabled={isLoading || !input.trim()}\r\n          aria-label=\"Send\"\r\n        >\r\n          {isLoading ? <LoadingSpinner size=\"sm\" color=\"white\" /> : <PaperAirplaneIcon className=\"w-5 h-5\" />}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction formatTime(ts) {\r\n  if (!ts) return '';\r\n  const d = new Date(ts);\r\n  return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n}\r\n\r\nexport default IntegratedChatbot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}